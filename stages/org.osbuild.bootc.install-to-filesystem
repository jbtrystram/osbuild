#!/usr/bin/python3
import os
import subprocess
import sys
import tempfile

import osbuild.api
from osbuild.util import containers


def main(options, inputs, paths):
    images = containers.parse_containers_input(inputs)
    assert len(images) == 1
    image = list(images.values())[0]

    env = os.environ.copy()
    # By default "bootc" will refuse to work on a non-selinux system if
    # the bootc container requires selinux. This is a sensible approach
    # in general but for us it's tricky because we want to be able to
    # generate images when running on developer machines or CI machines
    # that may not necessarily have selinux. So make bootc more relaxed.
    #
    # Can be dropped once https://github.com/containers/bootc/pull/420
    # is available in all our downstreams.
    env["BOOTC_SKIP_SELINUX_HOST_CHECK"] = "true"

    with containers.container_source(image) as (_, source):
        dst = paths["mounts"]
        pargs = ["bootc", "install", "to-filesystem",
                 "--source-imgref", source,
                 "--skip-fetch-check", "--generic-image"]
        # customize root
        root_ssh_keys = options.get("root-ssh-authorized-keys", [])
        if root_ssh_keys:
            tmpf = tempfile.NamedTemporaryFile(prefix="bootc-ssh-auth-keys-")
            for key in root_ssh_keys:
                tmpf.write(key.encode("utf8") + b"\n")
            tmpf.flush()
            pargs.extend(["--root-ssh-authorized-keys", tmpf.name])
        # customize kernel-args
        for karg in options.get("kernel-args", []):
            pargs.extend(["--karg", karg])
        target_imgref = options.get("target-imgref")
        if target_imgref:
            pargs.extend(["--target-imgref", target_imgref])
        stateroot = options.get("stateroot")
        if stateroot:
            pargs.extend(["--stateroot", stateroot])
        # Passing the flag with an empty value is intentional:
        # it triggers a supported behaviour where mountspec
        # kernel arguments are ommited.
        # See https://github.com/bootc-dev/bootc/pull/1451
        if "root-mount-spec" in options:
            root_spec = options["root-mount-spec"]
            if root_spec == "":
                pargs.extend(["--root-mount-spec="])
            else:
                pargs.extend(["--root-mount-spec", root_spec])
        if "boot-mount-spec" in options:
            boot_spec = options["boot-mount-spec"]
            if boot_spec == "":
                pargs.extend(["--boot-mount-spec="])
            else:
                pargs.extend(["--boot-mount-spec", boot_spec])

        # add target and go
        pargs.append(dst)
        subprocess.run(pargs, env=env, check=True)


if __name__ == "__main__":
    args = osbuild.api.arguments()
    r = main(args["options"], args["inputs"], args["paths"])
    sys.exit(r)
